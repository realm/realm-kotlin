plugins {
    // FIXME Figure out how to unify versions
    id("org.jetbrains.kotlin.multiplatform") version "1.4.20-M1-63"
    id "com.android.library"
    id("realm-kotlin")
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1"
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
}

group Realm.group
version Realm.version

apply plugin: 'maven-publish'

ktlint {
    // TODO: Figure out how to extract this so it can be shared between all projects we run ktlint on
    version.set(Versions.ktlintVersion)
    additionalEditorconfigFile.set(file("$rootDir/../.editorconfig"))
    debug.set(false)
    verbose.set(true)
    android.set(false)
    outputToConsole.set(true)
    reporters {
        // Human readable output
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.HTML)
    }
    ignoreFailures.set(false)
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}

// Common Kotlin configuration
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }

        commonTest {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
    }
}

// Android configuration
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        sourceSets {
            main {
                manifest.srcFile "src/androidMain/AndroidManifest.xml"
                jniLibs.srcDir "src/androidMain/jniLibs"
                androidTest.java.srcDirs += 'src/androidTest/kotlin'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    android("android") {
        publishLibraryVariants("release", "debug")
    }
    sourceSets {
        androidMain {
            kotlin.srcDir("src/androidMain/kotlin")
            dependencies {
                implementation(kotlin("stdlib"))
            }
        }
        androidTest {
            dependencies {
                implementation(kotlin("test"))
                implementation(kotlin("test-junit"))

                implementation 'junit:junit:4.12'
                implementation 'com.android.support.test:runner:1.0.2'
                implementation 'com.android.support.test:rules:1.0.2'
            }
        }
    }
}

kotlin {
    jvm() {}
    sourceSets {
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
    }
}

kotlin {
    iosX64("ios") {
    }
    sourceSets {
        iosMain { }
        iosTest { }
    }
}

kotlin {
    macosX64("macos") {
    }
    sourceSets {
        macosMain { }
        macosTest { }
    }
}


tasks.named("iosTest") {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11 Pro Max"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
