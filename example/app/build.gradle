plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.60'
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1"
}
repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            matchingFallbacks = ['debug'] // the lib export only debug deps, https://developer.android.com/studio/build/dependencies#resolve_matching_errors
            minifyEnabled false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

ktlint {
    // TODO: Figure out how to extract this so it can be shared between all projects we run ktlint on
    // TODO Convert to kts
    version.set("0.39.0")
    additionalEditorconfigFile.set(file("$rootDir/../.editorconfig"))
    debug.set(false)
    verbose.set(true)
    android.set(false)
    outputToConsole.set(true)
    reporters {
        // Human readable output
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.HTML)
    }
    ignoreFailures.set(false)
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.realm:Realm-Kotlin:0.0.1"
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('reflect') //TODO include this with lib as transitive deps
//                implementation "io.realm:Realm-Kotlin-android-debug:0.0.1"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "io.realm:Realm-Kotlin-ios:0.0.1"
            }
        }
        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}