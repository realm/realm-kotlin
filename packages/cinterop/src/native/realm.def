headers = realm.h realm/error_codes.h
headerFilter = realm.h realm/error_codes.h
// Relative paths in def file depends are resolved differently dependent on execution
// location
// https://youtrack.jetbrains.com/issue/KT-43439
// https://github.com/JetBrains/kotlin-native/issues/2314
// ... and def file does not support using environment variables
// https://github.com/JetBrains/kotlin-native/issues/3631
// so resolving paths through gradle
// staticLibraries = librealm-ffi-static-dbg.a librealm-dbg.a librealm-parser-dbg.a librealm-object-store-dbg.a
// libraryPaths.macos_x64 = ../external/core/build-macos_x64/src/realm/object-store/c_api ../external/core/build-macos_x64/src/realm ../external/core/build-macos_x64/src/realm/parser ../external/core/build-macos_x64/src/realm/object-store/
// libraryPaths.ios_x64 = ../external/core/build-macos_x64/src/realm/object-store/c_api ../external/core/build-macos_x64/src/realm ../external/core/build-macos_x64/src/realm/parser ../external/core/build-macos_x64/src/realm/object-store/
linkerOpts = -lcompression -lz -framework Foundation -framework CoreFoundation -framework Security
strictEnums = realm_errno realm_error_category realm_sync_errno_client realm_sync_errno_connection realm_sync_errno_session realm_web_socket_errno
---
#include <pthread.h>
#include <time.h>
#include <stdio.h>

/* Mutex */
typedef struct native_pthread_mutex {
    pthread_mutex_t mutex;
} native_pthread_mutex_t;


static inline int native_pthread_mutex_create(native_pthread_mutex_t *mutex) {
    pthread_mutexattr_t attributes;
    pthread_mutexattr_init(&attributes);
    pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_RECURSIVE);
    return pthread_mutex_init(&mutex->mutex, &attributes);
}

static inline int native_pthread_mutex_lock(native_pthread_mutex_t* mutex) {
    return pthread_mutex_lock(&mutex->mutex);
}

static inline int native_pthread_mutex_unlock(native_pthread_mutex_t* mutex) {
    return pthread_mutex_unlock(&mutex->mutex);
}

static inline int native_pthread_mutex_destroy(native_pthread_mutex_t* mutex) {
    return pthread_mutex_destroy(&mutex->mutex);
}
