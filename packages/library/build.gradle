plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "com.android.library"
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}

group Realm.group
version Realm.version

apply plugin: 'maven-publish'

// Common Kotlin configuration
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('reflect')
                api(project(":runtime-api"))
            }
        }

        commonTest {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
    }
}

// JVM
kotlin {
    jvm()
}

// Android configuration
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        sourceSets {
            main {
                manifest.srcFile "src/androidMain/AndroidManifest.xml"
                jniLibs.srcDir "src/androidMain/jniLibs"
                androidTest.java.srcDirs += 'src/androidTest/kotlin'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
kotlin {
    android("android") {
        publishLibraryVariants("release", "debug")
    }
    sourceSets {
        androidMain {
            kotlin.srcDir("src/androidMain/kotlin")
        }

        androidTest {
            dependencies {
                implementation(kotlin("test"))
                implementation(kotlin("test-junit"))

                implementation 'junit:junit:4.12'
                implementation 'com.android.support.test:runner:1.0.2'
                implementation 'com.android.support.test:rules:1.0.2'
                implementation(kotlin("reflect:1.4.20-M1-63"))
            }
        }
    }
}

// IOS Configurastion
kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    iosX64("ios") {
        compilations.main {
            cinterops {
                objectstore_wrapper {
                    includeDirs "${project.projectDir}/cpp_engine"
                    // Usually the following is specified via the cinterop def file as the following:
                    //  staticLibraries = librealm-objectstore-wrapper.a
                    //  libraryPaths = /Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/build-ios
                    //  linkerOpts = -framework Foundation -framework CoreFoundation -framework Security  -framework CoreServices -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/build-ios -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6 -lrealm-macosx-dbg -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/external/realm-object-store/src -lrealm-object-store -lrealm-parser-macosx-dbg
                    // However since the cinterop def file doens't support environment variable to define relative path (see https://github.com/JetBrains/kotlin-native/issues/3631)
                    // we're forced to use this hack, Note the cinterop plugin doesn't support specifying the 'linkerOpts' option in Gradle which would allow us to calculate the full path in the build script
                    // FIXME Mixup of macos and ios libraries??
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/build-ios/librealm-objectstore-wrapper.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6/librealm-ios-dbg.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/src/librealm-object-store.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6/librealm-parser-ios-dbg.a".toString()]

                    compilerOpts "-I/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/ -I${project.projectDir}/cpp_engine"
                }
            }
        }
    }
    sourceSets {
        iosMain {}
        iosTest {}
    }
}

// Macos configuration
kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("macos") {
        compilations.main {
            cinterops {
                objectstore_wrapper {
                    includeDirs "${project.projectDir}/cpp_engine"
                    // Usually the following is specified via the cinterop def file as the following:
                    //  staticLibraries = librealm-objectstore-wrapper.a
                    //  libraryPaths = /Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/build-ios
                    //  linkerOpts = -framework Foundation -framework CoreFoundation -framework Security  -framework CoreServices -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/build-ios -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6 -lrealm-macosx-dbg -L/Users/Nabil/Dev/realm/realm-kotlin-mpp/lib/cpp_engine/external/realm-object-store/src -lrealm-object-store -lrealm-parser-macosx-dbg
                    // However since the cinterop def file doens't support environment variable to define relative path (see https://github.com/JetBrains/kotlin-native/issues/3631)
                    // we're forced to use this hack, Note the cinterop plugin doesn't support specifying the 'linkerOpts' option in Gradle which would allow us to calculate the full path in the build script
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/build-ios/librealm-objectstore-wrapper.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6/librealm-macosx-dbg.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/src/librealm-object-store.a".toString()]
                    kotlinOptions.freeCompilerArgs += ["-include-binary", "${project.projectDir}/cpp_engine/external/realm-object-store/CMakeFiles/realm-core-5.23.6/librealm-parser-macosx-dbg.a".toString()]

                    compilerOpts "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ -I${project.projectDir}/cpp_engine"
                }
            }
        }
    }
    sourceSets {
        macosMain {}
        macosTest {}
    }
}
// Needs running emulator
//tasks.named("iosTest") {
//    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11 Pro Max"
//    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
//    group = JavaBasePlugin.VERIFICATION_GROUP
//    description = "Runs tests for target 'ios' on an iOS simulator"
//
//    doLast {
//        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
//        exec {
//            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
//        }
//    }
//}

configurations {
    compileClasspath
}

// FIXME Adhoc tasks to build object store wrappers until migrated to proper module
tasks.create("os") {
    doLast {
        exec {
            workingDir("cpp_engine/external/realm-object-store/")
            commandLine("cmake", ".")
        }
        exec {
            workingDir("cpp_engine/external/realm-object-store/")
            commandLine("make", "-j8")
        }
    }
    outputs.file("cpp_engine/external/realm-object-store/src/librealm-object-store.a")
}
tasks.create("wrapperIos") {
    dependsOn("os")
    doLast {
        exec {
            workingDir("cpp_engine/build-ios")
            commandLine("cmake", ".")
        }
        exec {
            workingDir("cpp_engine/build-ios")
            commandLine("make", "-j8", "realm-objectstore-wrapper")
        }
    }
    outputs.file("cpp_engine/build-ios/librealm-objectstore-wrapper.a")
}
// FIXME Requires ANDROID_NDK environment variable to point to android-ndk-r10e folder
// FIXME Not properly hooked up with android target tasks
tasks.create("wrapperAndroid") {
    dependsOn("os")
    doLast {
        exec {
            workingDir("cpp_engine/build-android")
            commandLine("cmake", "-DCMAKE_TOOLCHAIN_FILE=../android.toolchain.cmake", "-DANDROID_ABI=x86_64", "-DENABLE_DEBUG_CORE=false", ".")
        }
        exec {
            workingDir("cpp_engine/build-android")
            commandLine("make", "-j8", "realm-objectstore-wrapper-android-dynamic")
        }
        copy {
            from "cpp_engine/build-android/librealm-objectstore-wrapper-android-dynamic.so"
            into "src/androidMain/jniLibs/x86_64/"
        }
    }
    outputs.file("src/androidMain/jniLibs/x86_64/librealm-objectstore-wrapper-android-dynamic.so")
}
tasks.named("preBuild") {
    dependsOn(wrapperAndroid)
}
tasks.named("cinteropObjectstore_wrapperMacos") {
    dependsOn(wrapperIos)
}

