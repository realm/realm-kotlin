plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "com.android.library"
    id "realm-publisher"
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}

// Common Kotlin configuration
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('reflect')
                // If runtimeapi is merged with cinterop then we will are exposing both to the users
                // Runtime holds annotations, etc. that has to be exposed to users
                api(project(":runtime-api"))
                // Cinterop does not hold anything required by users
                implementation(project(":cinterop"))
                // FIXME Only used for parsing schema strings until properly typed. Remove when
                //  https://github.com/realm/realm-kotlin/issues/54 is done.
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1")
            }
        }

        commonTest {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
    }

    // See https://kotlinlang.org/docs/reference/mpp-publish-lib.html
    // FIXME: We need to revisit this when we enable building on multiple hosts. Right now it doesn't do the right thing.
    configure([targets["metadata"], jvm()]) {
        mavenPublication {
            def targetPublication = this
            tasks.withType(AbstractPublishToMaven.class)
                .matching { task -> task.publication == targetPublication }
                .all { task -> onlyIf { t -> t.findProperty("isMainHost") == "true" } }
        }
    }
}

// JVM
kotlin {
    jvm()
}

// Android configuration
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        sourceSets {
            main {
                manifest.srcFile "src/androidMain/AndroidManifest.xml"
                jniLibs.srcDir "src/androidMain/jniLibs"
                androidTest.java.srcDirs += 'src/androidTest/kotlin'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
kotlin {
    android("android") {
        publishLibraryVariants("release", "debug")
    }
    sourceSets {
        androidMain {
            kotlin.srcDir("src/androidMain/kotlin")
            dependencies {
                api(project(":cinterop"))
            }
        }

        androidTest {
            dependencies {
                implementation(kotlin("test"))
                implementation(kotlin("test-junit"))

                implementation 'junit:junit:4.12'
                implementation 'com.android.support.test:runner:1.0.2'
                implementation 'com.android.support.test:rules:1.0.2'
                implementation(kotlin("reflect:$Versions.kotlin"))
            }
        }
    }
}

kotlin {
    sourceSets {
        nativeCommon {
            dependsOn(commonMain)
        }
    }
}

// IOS Configurastion
kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    iosX64("ios") {}
    sourceSets {
        iosMain {
            dependsOn nativeCommon
        }
        iosTest {}
    }
}

// Macos configuration
kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("macos") {}
    sourceSets {
        macosMain {
            dependsOn nativeCommon
        }
        macosTest {}
    }
}
// Needs running emulator
//tasks.named("iosTest") {
//    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11 Pro Max"
//    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
//    group = JavaBasePlugin.VERIFICATION_GROUP
//    description = "Runs tests for target 'ios' on an iOS simulator"
//
//    doLast {
//        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
//        exec {
//            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
//        }
//    }
//}

configurations {
    compileClasspath
}

realmPublish {
    pom {
        name = "Library"
        description = "Library code for Realm Kotlin. This artifact is not " +
                "supposed to be consumed directly, but through " +
                "'io.realm.kotlin:gradle-plugin:${Realm.version}' instead."
    }
    ojo {
        // List fetched from https://medium.com/vmware-end-user-computing/publishing-kotlin-multiplatform-artifacts-to-artifactory-maven-a283ae5912d6
        // TODO Unclear if we should name "iosArm64" and "macosX64" as well?
        publications = ["androidDebug", "androidRelease", "ios", "macos", "jvm", "kotlinMultiplatform", "metadata"]
    }
}
